#include <iostream>
using namespace std;

template <class T>
struct treeNode {
	T key;
	treeNode<T> *l;
	treeNode<T> *r;
	treeNode<T>* p;
	treeNode(T key_,treeNode<T> *p_=0,treeNode<T> *l_=0,treeNode<T> *r_=0):key(key_),l(l_),r(r_),p(p_){}
};

template <class T>
class binTree {
	void copyTree(treeNode<T>*&,treeNode<T>*&);
	void print_(treeNode<T>*, int)const;
public:
	treeNode<T> *root;
	binTree():root(0){}
	binTree(binTree<T>& a) {
		if(!a.root) root=0;
		else copyTree(root,a.root);
	}
	~binTree();
	void print()const	{cout<<endl<<"- - - - - - - - - -"<<endl<<endl; print_(root,0); cout<<endl;}
};


template <class T>
void binTree<T>::copyTree(treeNode<T>*& dest,treeNode<T>*& src) {
	if(!src) dest = 0;
	else {
		dest = new treeNode<T>(src->key);
		copyTree(dest->l,src->l);
		copyTree(dest->r,src->r);
	}
}


/*	required	*/															// <-------------------------------
/* using postorder traversal */
template <class T>
binTree<T>::~binTree() {
	treeNode<T> *curr = root;
	treeNode<T> *prev = curr->p;
	treeNode<T> *tmp,*del;
	while(curr) {
		tmp = curr;
		if( prev == 0 || prev->l == curr || prev->r == curr ) {
			if(curr->l) curr=curr->l;
			else if(curr->r) curr=curr->r;
			else {
				del = curr;
				curr=curr->p;
				delete del;
			}
		} else if(prev == curr->l) {
			if(curr->r) curr=curr->r;
			else {
				del = curr;
				curr=curr->p;
				delete del;
			}
		} else {
			del = curr;
			curr=curr->p;
			delete del;
		}
		prev = tmp;
	}
}

template <class T>
void binTree<T>::print_(treeNode<T>* tree, int indent=0)const {
	if(!tree) return;
	print_(tree->r, indent+5);
	for(int i=0; i<indent; i++) cout<<' ';
	cout<<'('<<(int)tree->key<<')'<<endl;
	print_(tree->l, indent+5);
}

template <class T>
class binSearchTree : public binTree<T> {
	void Transplant(treeNode<T> *,treeNode<T> *);
public:
	void insert(T item);
	void remove(T item);
	treeNode<T>* find(T item);
	treeNode<T>* inorderPrev(treeNode<T>*);
	treeNode<T>* inorderNext(treeNode<T>*);
	treeNode<T>* begin();
	treeNode<T>* end();
};

template <class T>
void binSearchTree<T>::insert(T elem) {
	treeNode<T> *y=0;
	treeNode<T> *z=new treeNode<T>(elem);
	treeNode<T> *x=root;
	while(x) {
		y=x;
		if(z->key<x->key) x=x->l;
		else x=x->r;
	}
	z->p=y;
	if(!y) root = z;
	else if(z->key<y->key)
		y->l=z;
	else
		y->r=z;
}

template <class T>
void binSearchTree<T>::remove(T elem) {
	treeNode<T> *z = find(elem);
	if(!z->l)
		Transplant(z,z->r);
	else if(!z->r)
		Transplant(z,z->l);
	else {
		treeNode<T> *y=z->r;
		while(y->l) y=y->l;
		if(y->p!=z) {
			Transplant(y,y->r);
			y->r=z->r;
			y->r->p=y;
		}
		Transplant(z,y);
		y->l=z->l;
		y->l->p=y;
	}
}

template <class T>
treeNode<T>* binSearchTree<T>::find(T elem) {
	treeNode<T> *v=root;
	while(v && v->key!=elem)
		if(elem->key<=v->key)
			v=v->l;
		else v=v->r;
		return v;
}

template <class T>
void binSearchTree<T>::Transplant(treeNode<T> *u,treeNode<T> *v) {
	if(!u->p) root = v;
	else if(u==u->p->l)
		u->p->l=v;
	else u->p->r=v;
	if(v) v->p = u->p;
}

template <class T>
treeNode<T>* binSearchTree<T>::begin() {
	treeNode<T> *v=root;
	while(v->l) v=v->l;
	return v;
}

template <class T>
treeNode<T>* binSearchTree<T>::end() {
	/*treeNode<T> *v=root;
	while(v->r) v=v->r;*/
	return 0;
}

template <class T>
treeNode<T>* binSearchTree<T>::inorderPrev(treeNode<T>* ptr) {
	if(ptr->l) {
		treeNode<T> *v=ptr->l;
		while(v->r) v=v->r;
		return v;
	}
	treeNode<T> *y=ptr->p;
	while(y && ptr==y->l) {
		ptr=y;
		y=y->p;
	}
	return y;
}

template <class T>
treeNode<T>* binSearchTree<T>::inorderNext(treeNode<T>* ptr) {
	if(ptr->r) {
		treeNode<T> *v=ptr->r;
		while(v->l) v=v->l;
		return v;
	}
	treeNode<T> *y=ptr->p;
	while(y && ptr==y->r) {
		ptr=y;
		y=y->p;
	}
	return y;
}

template <class T>
class set {
	binSearchTree<T> *t;
public:
	set():t(new binSearchTree<T>){}
	set(char* A,int len):t(new binSearchTree<T>) {
		for(int i=0;i<len;i++)
			t->insert(A[i]);
	}
	friend set Union(set& s1,set& s2);
	~set(){ t->~binSearchTree();}
	set(set& a):t(new binSearchTree<T>(*a.t)){}
	void print()const { t->print();}
};


/* 4 */
template <class T>
set<T> Union(set<T>& s1,set<T>& s2) {
	set<T> ret;
	treeNode<T> *i = s1.t->begin(),*j = s2.t->begin();
	while(i!=s1.t->end() && j!=s1.t->end()) {
		if(i->key < j->key) {
			ret.t->insert(i->key);
			i = s1.t->inorderNext(i);
		}
		else if(i->key > j->key) {
			ret.t->insert(j->key);
			j = s1.t->inorderNext(j);
		}
		else {
			ret.t->insert(i->key);
			i = s1.t->inorderNext(i),j = s2.t->inorderNext(j);
		}
	}
	while(i!=s1.t->end()) {
		ret.t->insert(i->key);
		i = s1.t->inorderNext(i);
	}
	while(j!=s2.t->end()) {
		ret.t->insert(j->key);
		j = s2.t->inorderNext(j);
	}
	return ret;
}

set<char> Union(set<char>& s1,set<char>& s2) {
	set<char> ret;
	treeNode<char> *i = s1.t->begin(),*j = s2.t->begin();
	while(i!=s1.t->end() && j!=s1.t->end()) {
		if(i->key < j->key) {
			ret.t->insert(i->key);
			i = s1.t->inorderNext(i);
		}
		else if(i->key > j->key) {
			ret.t->insert(j->key);
			j = s1.t->inorderNext(j);
		}
		else {
			ret.t->insert(i->key);
			i = s1.t->inorderNext(i),j = s2.t->inorderNext(j);
		}
	}
	while(i!=s1.t->end()) {
		ret.t->insert(i->key);
		i = s1.t->inorderNext(i);
	}
	while(j!=s2.t->end()) {
		ret.t->insert(j->key);
		j = s2.t->inorderNext(j);
	}
	return ret;
}

int main() {
	char arr1[] = {1,3,5,4,6,7};
	char arr2[] = {13,6,4,8,6,1};
	set<char> a(arr1,6),b(arr2,6);
	set<char> c=Union(a,b);
	c.print();
	return 0;
}
